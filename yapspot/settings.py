"""
Django settings for yapspot project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from decouple import config
import requests
from django.contrib.messages import constants as messages


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

DJANGO_ENV = config("DJANGO_ENV")

ALLOWED_HOSTS = []
# SECURITY WARNING: don't run with debug turned on in production!
if DJANGO_ENV == 'PROD':
    SECRET_KEY = config('DJANGO_SECRET_KEY_PROD')
    DEBUG = False
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 15768000 
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SESSION_COOKIE_NAME = '__Host-sessionid'  # using "__Host-" instead of "__Secure-"" as the webRTC subdomains do not need to see cookies.
    CSRF_COOKIE_NAME = '__Host-csrftoken'     # https://www.sjoerdlangkemper.nl/2017/02/09/cookie-prefixes/
    ALLOWED_HOSTS = ['*.yapspot.com','www.yapspot.com', 'yapspot.com']
    try:
        EC2_IP = requests.get('http://169.254.169.254/latest/meta-data/local-ipv4').text
        ALLOWED_HOSTS.append(EC2_IP)
    except requests.exceptions.RequestException:
        pass
    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID_PROD")
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY_PROD")

else:
    SECRET_KEY = config('DJANGO_SECRET_KEY_TEST')
    DEBUG = True
    THUMBNAIL_DEBUG = True
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']
    INTERNAL_IPS = ['127.0.0.1']
    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID_TEST")
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY_TEST")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'widget_tweaks',
    'yap',
    'imagekit',
    'storages',
    'phonenumber_field',
    'PIL',
    'captcha',
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'yap.middlewaretimezone.TimezoneMiddleware',
]

ROOT_URLCONF = 'yapspot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'yap', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'yapspot.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


###############################################################################
#############################     DATABASE    #################################
###############################################################################

if DJANGO_ENV == 'PROD':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': config("DB_NAME_PROD"),
            'USER': config("DB_USERNAME_PROD"),
            'PASSWORD': config("DB_PASSWORD_PROD"),
            'HOST': config("DB_HOST_PROD"),
            'PORT': '5432',
            'OPTIONS': {
                'sslmode': 'require',
            },
        }
    }

else:

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


###############################################################################
##############################      CACHING    ################################
###############################################################################

if DJANGO_ENV == 'PROD':
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": "rediss://master.yapspotredis.fdqolx.use1.cache.amazonaws.com:6379/",
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            }
        }
    }
    SESSION_ENGINE = "django.contrib.sessions.backends.cache"
    SESSION_CACHE_ALIAS = "default"
    CACHE_TTL = 86400
    USER_AGENTS_CACHE = 'default'


###############################################################################
##########################      Email Backend    ##############################
###############################################################################

if DJANGO_ENV == 'PROD':
    EMAIL_BACKEND = 'django_ses.SESBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' 
    #EMAIL_BACKEND = 'django_ses.SESBackend'

DEFAULT_FROM_EMAIL = 'hello@yapspot.com'
#ACCOUNT_EMAIL_SUBJECT_PREFIX = '[YapSpot.com] '

# for phone numbers
PHONENUMBER_DEFAULT_REGION = 'US'


###########################      ReCAPTCHA    #################################
###############################################################################

RECAPTCHA_PUBLIC_KEY = config('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = config('RECAPTCHA_PRIVATE_KEY')
RECAPTCHA_DOMAIN = 'www.recaptcha.net'


###############################################################################
##############################      AWS S3    #################################
###############################################################################

STATICFILES_STORAGE = 'storage_backends.StaticStorage' 
DEFAULT_FILE_STORAGE = 'storage_backends.PrivateMediaStorage'
PRIVATE_FILE_STORAGE = 'storage_backends.PrivateMediaStorage'

AWS_STATIC_LOCATION = 'static'
AWS_PRIVATE_MEDIA_LOCATION = 'media'

if DJANGO_ENV == "PROD":
    AWS_STORAGE_BUCKET_NAME_STATIC = 'yapspot-prod-static'
    AWS_STORAGE_BUCKET_NAME_MEDIA = 'yapspot-prod'
else:
    AWS_STORAGE_BUCKET_NAME_STATIC = 'yapspot-test'
    AWS_STORAGE_BUCKET_NAME_MEDIA = 'yapspot-test'

AWS_S3_CUSTOM_DOMAIN_STATIC = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME_STATIC
AWS_S3_CUSTOM_DOMAIN_MEDIA = '%s.s3.amazonaws.com' % AWS_STORAGE_BUCKET_NAME_MEDIA
STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN_STATIC, AWS_STATIC_LOCATION)
MEDIA_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN_MEDIA, AWS_PRIVATE_MEDIA_LOCATION)

AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400',}


###############################################################################
##########################      Language Stuff    #############################
###############################################################################

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


###############################################################################
##############################      GeoIP    ##################################
###############################################################################

GEOIP_PATH = os.path.join(BASE_DIR, 'geoip')


###############################################################################
##############################     STORAGE    #################################
###############################################################################

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]


###############################################################################
#############################      ALLAUTH    #################################
###############################################################################

SITE_ID = 1
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # Allauth.  Use email instead of username for login
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_SESSION_REMEMBER = False
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 10
LOGIN_REDIRECT_URL = 'eventlist'
ACCOUNT_CONFIRM_EMAIL_ON_GET = True


###############################################################################
####################         Messages Settings       ##########################
###############################################################################

MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}
